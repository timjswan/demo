package com.eidosmedia.tags.logger;
import java.io.PrintWriter;
import java.io.StringWriter;

import javax.servlet.jsp.JspContext;
import javax.servlet.jsp.PageContext;

public class Logger {	
	private StringBuffer trace = new StringBuffer("");
	private org.apache.log4j.Logger out;
	private JspContext jspContext;
	
	/**
	 * Constructor 1 - creates and apache logger.
	 */
	public Logger(){		
		// Create an apache logger
		this.out = org.apache.log4j.Logger.getLogger("");		
	}
	
	/**
	 * Constructor 2 - creates and apache logger and set the jsp context.
	 * 
	 * @param jspContext - the jsp context to be set.
	 */	
	public Logger(JspContext jspContext){		
		this.out = org.apache.log4j.Logger.getLogger("");
		this.jspContext = jspContext;
	}
	
	/**
	 * Output a message to the log.
	 * 
	 * @param message - the message to be written to the log.
	 */
	public void log(String message) {
		this.out.debug(message);
	}
	
	/**
	 * Overloaded error() as the feedback is easier to implement as an optional flag
	 * 
	 * @param e - the Throwable generated by the error
	 * @param feedback - a flag to add the error message to the feedback buffer or not.
	 */
	public void error(Throwable e, boolean feedback){
		this.handleError(e);
		// Compare the current message to what is currently in the trace so we don't get duplicate text
		if(feedback && !this.trace.toString().contains(e.getMessage())){
			this.trace.append(e.getMessage());
			this.jspContext.setAttribute("errorStatus", e.getMessage(), PageContext.SESSION_SCOPE);
		}
	}
	
	/**
	 * @param e - the Throwable generated by the error
	 */	
	public void error(Throwable e){
		this.handleError(e);
	}
	
	/**
	 * The main error handler that prints the stack trace to the log.
	 * 
	 * @param e - the Throwable generated by the error
	 */
	public void handleError(Throwable e){
		StringWriter sw = new StringWriter();
		PrintWriter pw = new PrintWriter(sw, true);
		
		e.printStackTrace(pw);
		String errorMessage = sw.getBuffer().toString();
		
		this.log(errorMessage);
	}
	
	/**
	 * Output what has been stored in the trace buffer
	 */
	public String getLogFeedBack(){
		return this.trace.toString();
	}
}
